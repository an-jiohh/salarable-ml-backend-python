from app.core.config import Settings, get_settings
import asyncio
from app.core.event_manager import add_event

import logging

logger = logging.getLogger(__name__)

class InterviewService:
    def __init__(self, config:Settings):
        self.config = config

    async def get_quetions(self, stt_text:str):
        await asyncio.sleep(30)
        return 
    
    async def evaulate_answer(self, count:int, input_text:str):
        fe_evaluation = [
            {
            #     "expanded_questions":"""
            #  '당신의 포트폴리오에 따르면, Tanstack-Query를 사내에 도입했다고 언급하셨습니다. 이 도입 과정에서 가장 큰 어려움은 무엇이었나요? 그리고 그 어려움을 어떻게 극복하셨나요?',
            #   'Tanstack-Query를 사내에 도입하는 과정에서 예상치 못한 문제들이 있었나요? 있었다면, 그 문제들을 어떻게 해결하셨는지 설명해 주세요.',
            #   'Tanstack-Query를 도입할 때 팀원들의 반응은 어땠나요? 그들의 우려나 저항을 어떻게 처리하셨는지 궁금합니다.',
            #   'Tanstack-Query를 사내에 성공적으로 도입하기 위해 어떤 전략을 사용하셨나요? 구체적인 사례가 있다면 공유해 주세요.',
            #   'Tanstack-Query를 도입하면서 기술적인 측면 외에도 조직 문화나 팀워크 측면에서 겪었던 어려움이 있었나요? 있었다면, 이를 어떻게 해결했는지 설명해 주세요.',""",
             "ranked_questions":"""
             원본 질문과 유사한 순서대로 나열한 증강된 질문들

             '당신의 포트폴리오에 따르면, Tanstack-Query를 사내에 도입했다고 언급하셨습니다. 이 도입 과정에서 가장 큰 어려움은 무엇이었나요? 그리고 그 어려움을 어떻게 극복하셨나요?', 0.537457596168787,
             'Tanstack-Query를 사내에 도입하는 과정에서 예상치 못한 문제들이 있었나요? 있었다면, 그 문제들을 어떻게 해결하셨는지 설명해 주세요.', 0.1366836721252734,
             'Tanstack-Query를 도입하면서 기술적인 측면 외에도 조직 문화나 팀워크 측면에서 겪었던 어려움이 있었나요? 있었다면, 이를 어떻게 해결했는지 설명해 주세요.', 0.10019441816255653,
             'Tanstack-Query를 사내에 성공적으로 도입하기 위해 어떤 전략을 사용하셨나요? 구체적인 사례가 있다면 공유해 주세요.', 0.06463883344840639,
             'Tanstack-Query를 도입할 때 팀원들의 반응은 어땠나요? 그들의 우려나 저항을 어떻게 처리하셨는지 궁금합니다.', 0.06133331812094943,""",
             "augumented_datas":"""
             증강된 질문에 대한 답변들

             'Tanstack-Query 도입 시 가장 큰 어려움은 기존 코드베이스와의 통합이었습니다. 이를 극복하기 위해 팀원들과 함께 Tanstack-Query의 공식 문서를 참고하여 점진적으로 마이그레이션 계획을 세우고, 테스트를 통해 안정성을 확보했습니다.'
             'Tanstack-Query 도입 시, 캐싱 전략을 기존 시스템과 통합하는 데 어려움이 있었습니다. 이를 해결하기 위해 공식 문서의 캐싱 메커니즘을 참고하여, 기존 시스템의 캐시와 Tanstack-Query의 캐시를 조화롭게 통합할 수 있는 커스텀 훅을 개발했습니다.'
             'Tanstack-Query 도입 시, 팀원들이 새로운 기술에 대한 학습 곡선에 부담을 느꼈습니다. 이를 해결하기 위해, 우리는 정기적인 워크숍과 스터디 세션을 통해 팀원들이 함께 학습하고, 서로의 경험을 공유할 수 있는 환경을 조성했습니다.""",
            },
            {
                # "expanded_questions":['TanStack Query를 다른 상태 관리 라이브러리와 함께 사용할 때 어떤 충돌이 발생할 수 있을까요? 그리고 이를 방지하기 위한 방법은 무엇인가요?', '기존의 상태 관리 라이브러리와 TanStack Query를 통합할 때 성능 저하가 발생할 수 있는 이유는 무엇이며, 이를 개선하기 위한 전략은 무엇인가요?', 'TanStack Query와 기존 상태 관리 도구를 함께 사용할 때 데이터 일관성을 유지하는 방법은 무엇인가요?', '상태 관리 라이브러리와 TanStack Query의 캐시 전략이 충돌할 경우 어떻게 해결할 수 있을까요?', 'TanStack Query를 다른 상태 관리 솔루션과 통합하면서 생길 수 있는 코드 복잡성을 줄이는 방법은 무엇인가요?'],
                "ranked_questions":"""
                원본잘문과 유사한 순서대로 나열한 증강된 질문들

                '기존의 상태 관리 라이브러리와 TanStack Query를 통합할 때 성능 저하가 발생할 수 있는 이유는 무엇이며, 이를 개선하기 위한 전략은 무엇인가요?', 0.4179459193832339,
                '상태 관리 라이브러리와 TanStack Query의 캐시 전략이 충돌할 경우 어떻게 해결할 수 있을까요?', 0.3390881957496666,
                'TanStack Query를 다른 상태 관리 라이브러리와 함께 사용할 때 어떤 충돌이 발생할 수 있을까요? 그리고 이를 방지하기 위한 방법은 무엇인가요?', 0.29146431102574366,
                'TanStack Query를 다른 상태 관리 솔루션과 통합하면서 생길 수 있는 코드 복잡성을 줄이는 방법은 무엇인가요?', 0.16258806481406846,
                'TanStack Query와 기존 상태 관리 도구를 함께 사용할 때 데이터 일관성을 유지하는 방법은 무엇인가요?', 0.14853667738158075,""",
                "augumented_datas":"""
                증강된 질문에 대한 답변들

                'TanStack Query는 서버 상태를 관리하는 데 최적화되어 있으며, 클라이언트 상태와 서버 상태를 혼합하여 관리할 경우 불필요한 리렌더링이 발생할 수 있습니다. 이를 개선하기 위해서는 클라이언트 상태와 서버 상태를 명확히 구분하고, TanStack Query의 캐싱 및 비동기 데이터 페칭 기능을 최대한 활용하여 서버 상태를 관리하는 것이 좋습니다.', 
                '상태 관리 라이브러리와 TanStack Query의 캐시 전략이 충돌할 경우, TanStack Query의 캐시를 우선적으로 사용하고, 상태 관리 라이브러리는 전역 상태 관리에 집중하도록 설계합니다. 이를 통해 데이터 동기화 문제를 최소화할 수 있습니다.', 
                'TanStack Query는 서버 상태 관리를 위한 라이브러리로, 클라이언트 상태 관리 라이브러리와 함께 사용할 때 데이터 동기화 문제나 중복 상태 관리가 발생할 수 있습니다. 이를 방지하기 위해, TanStack Query는 서버 상태에만 집중하고, 클라이언트 상태는 다른 라이브러리로 관리하여 역할을 명확히 분리하는 것이 좋습니다.', """,
            },
            {
                # "expanded_questions":['ContextAPI를 사용하면서 직면했던 상태 관리의 어려움을 구체적으로 설명해 주실 수 있나요?', '상태 관리 문제를 해결하기 위해 ContextAPI 외에 다른 도구나 라이브러리를 고려해 보셨나요?', 'ContextAPI 사용 시 발생한 문제를 해결하기 위해 어떤 구체적인 전략을 사용하셨는지 설명해 주세요.', '상태 관리의 어려움을 겪으면서 배운 점이나 개선된 점이 있다면 무엇인가요?', 'ContextAPI로 인한 상태 관리 문제를 해결하는 과정에서 팀원들과 어떻게 협력하셨나요?', '상태 관리를 개선하기 위해 ContextAPI 외에 어떤 기술이나 방법론을 시도했는지 말씀해 주세요.', 'ContextAPI 사용 중 발생한 문제를 해결하면서 얻은 가장 큰 교훈은 무엇인가요?', '상태 관리의 어려움을 극복하기 위해 어떤 리소스나 자료를 참고하셨나요?'],
                "ranked_questions":[('ContextAPI를 사용하면서 직면했던 상태 관리의 어려움을 구체적으로 설명해 주실 수 있나요?', 0.27808407704525806), ('상태 관리의 어려움을 극복하기 위해 어떤 리소스나 자료를 참고하셨나요?', 0.22602935920133013), ('ContextAPI 사용 시 발생한 문제를 해결하기 위해 어떤 구체적인 전략을 사용하셨는지 설명해 주세요.', 0.1739375506306119), ('상태 관리 문제를 해결하기 위해 ContextAPI 외에 다른 도구나 라이브러리를 고려해 보셨나요?', 0.1490020173727617), ('상태 관리의 어려움을 겪으면서 배운 점이나 개선된 점이 있다면 무엇인가요?', 0.11418986280865207), ('상태 관리를 개선하기 위해 ContextAPI 외에 어떤 기술이나 방법론을 시도했는지 말씀해 주세요.', 0.09852921359982028), ('ContextAPI로 인한 상태 관리 문제를 해결하는 과정에서 팀원들과 어떻게 협력하셨나요?', 0.0578760931105469), ('ContextAPI 사용 중 발생한 문제를 해결하면서 얻은 가장 큰 교훈은 무엇인가요?', 0.03828131453468387)],
                "augumented_datas":[{'question': 'ContextAPI를 사용하면서 직면했던 상태 관리의 어려움을 구체적으로 설명해 주실 수 있나요?', 'best_answer': 'ContextAPI를 사용할 때, 상태가 깊은 컴포넌트 트리로 전달될 경우, 불필요한 리렌더링이 발생할 수 있습니다. 이를 해결하기 위해 React.memo와 useMemo를 사용하여 최적화를 시도했습니다.', 'tech_keyword': 'ContextAPI', 'link': 'https://reactjs.org/docs/context.html', 'example': ["우수 : 'ContextAPI를 사용할 때, 상태가 깊은 컴포넌트 트리로 전달될 경우, 불필요한 리렌더링이 발생할 수 있습니다. 이를 해결하기 위해 React.memo와 useMemo를 사용하여 최적화를 시도했습니다.'", "보통 : 'ContextAPI를 사용할 때, 상태가 여러 컴포넌트에 걸쳐 있을 때 관리가 어려웠습니다.'", "미흡 : 'ContextAPI를 사용할 때 어려움이 없었습니다.'"]}, {'question': '상태 관리의 어려움을 극복하기 위해 어떤 리소스나 자료를 참고하셨나요?', 'best_answer': '상태 관리의 어려움을 극복하기 위해 Redux의 공식 문서와 React의 Context API 문서를 참고했습니다. 이 문서들은 상태 관리의 기본 개념과 패턴을 이해하는 데 큰 도움이 되었습니다.', 'tech_keyword': 'Redux, React Context API', 'link': 'https://redux.js.org/introduction/getting-started', 'example': ["우수 : 'Redux의 공식 문서와 React Context API 문서를 참고하여 상태 관리의 기본 개념과 패턴을 이해했습니다.'", "보통 : 'Redux와 React 관련 블로그 글을 읽고 상태 관리에 대해 공부했습니다.'", "미흡 : '상태 관리에 대해 특별히 참고한 자료는 없습니다.'"]}, {'question': 'ContextAPI 사용 시 발생한 문제를 해결하기 위해 어떤 구체적인 전략을 사용하셨는지 설명해 주세요.', 'best_answer': 'ContextAPI 사용 시 성능 문제를 해결하기 위해 React.memo와 useMemo를 사용하여 불필요한 재렌더링을 방지했습니다. 또한, Context를 분리하여 필요한 컴포넌트에만 전달함으로써 성능을 최적화했습니다.', 'tech_keyword': 'ContextAPI, React.memo, useMemo', 'link': 'https://reactjs.org/docs/context.html', 'example': ["우수 : 'ContextAPI 사용 시 성능 문제를 해결하기 위해 React.memo와 useMemo를 사용하여 불필요한 재렌더링을 방지했습니다. 또한, Context를 분리하여 필요한 컴포넌트에만 전달함으로써 성능을 최적화했습니다.'", "보통 : 'ContextAPI 사용 시 문제가 발생했을 때, useMemo를 사용하여 성능을 개선했습니다.'", "미흡 : 'ContextAPI 사용 시 문제가 있었지만, 어떻게 해결했는지 기억나지 않습니다.'"]}],
            },
            {
                # "expanded_questions":['Redux를 사용해본 경험이 없으신 것 같은데, 혹시 관련해서 공부하신 적이 있나요?', 'Redux에 대해 알고 계신 부분이나 이해하고 있는 개념이 있다면 설명해 주실 수 있나요?', '포트폴리오에는 Redux 경험이 없지만, 혹시 개인 프로젝트나 학습을 통해 사용해보신 적이 있나요?', 'Redux를 사용한 경험은 없지만, 이론적으로 어떻게 작동하는지 설명할 수 있으신가요?', 'Redux에 대한 지식은 어느 정도 있으신가요? 혹시 관련 자료나 강의를 통해 학습하셨나요?', '혹시 Redux를 사용하지 않았더라도 비슷한 상태 관리 라이브러리를 사용해본 경험이 있으신가요?', 'Redux의 기본 개념이나 원리에 대해 알고 계신 부분을 말씀해 주실 수 있을까요?'],
                "ranked_questions":[('Redux를 사용해본 경험이 없으신 것 같은데, 혹시 관련해서 공부하신 적이 있나요?', 0.13591551623318981), ('Redux를 사용한 경험은 없지만, 이론적으로 어떻게 작동하는지 설명할 수 있으신가요?', 0.13197814757167958), ('포트폴리오에는 Redux 경험이 없지만, 혹시 개인 프로젝트나 학습을 통해 사용해보신 적이 있나요?', 0.11191543677051066), ('Redux에 대해 알고 계신 부분이나 이해하고 있는 개념이 있다면 설명해 주실 수 있나요?', 0.11110987628445876), ('혹시 Redux를 사용하지 않았더라도 비슷한 상태 관리 라이브러리를 사용해본 경험이 있으신가요?', 0.09123073357439775), ('Redux의 기본 개념이나 원리에 대해 알고 계신 부분을 말씀해 주실 수 있을까요?', 0.08070240172587709), ('Redux에 대한 지식은 어느 정도 있으신가요? 혹시 관련 자료나 강의를 통해 학습하셨나요?', 0.02334627961332198)],
                "augumented_datas":[{'question': 'Redux를 사용해본 경험이 없으신 것 같은데, 혹시 관련해서 공부하신 적이 있나요?', 'best_answer': '네, Redux의 공식 문서를 통해 상태 관리의 기본 개념과 사용 방법을 공부했습니다. Redux는 애플리케이션의 상태를 예측 가능하게 관리할 수 있도록 도와주는 라이브러리로, 특히 대규모 애플리케이션에서 유용하다는 것을 배웠습니다.', 'tech_keyword': 'Redux', 'link': 'https://redux.js.org/', 'example': ["우수 : 'Redux의 공식 문서를 통해 상태 관리의 기본 개념과 사용 방법을 공부했습니다. Redux는 애플리케이션의 상태를 예측 가능하게 관리할 수 있도록 도와주는 라이브러리로, 특히 대규모 애플리케이션에서 유용하다는 것을 배웠습니다.'", "보통 : 'Redux에 대해 공부한 적은 있지만, 실제로 사용해본 경험은 없습니다.'", "미흡 : 'Redux가 무엇인지 잘 모릅니다.'"]}, {'question': 'Redux를 사용한 경험은 없지만, 이론적으로 어떻게 작동하는지 설명할 수 있으신가요?', 'best_answer': 'Redux는 애플리케이션의 상태를 중앙에서 관리하는 패턴 및 라이브러리로, 단일 스토어를 통해 상태를 관리하고, 액션을 통해 상태를 변경하며, 리듀서를 통해 상태 변경 로직을 정의합니다.', 'tech_keyword': 'Redux', 'link': 'https://redux.js.org/introduction/getting-started', 'example': ["우수 : 'Redux는 단일 스토어를 통해 상태를 중앙에서 관리하며, 액션과 리듀서를 통해 상태를 변경합니다.'", "보통 : 'Redux는 상태 관리 라이브러리로, 상태를 중앙에서 관리합니다.'", "미흡 : 'Redux는 상태를 관리하는 도구입니다.'"]}, {'question': '포트폴리오에는 Redux 경험이 없지만, 혹시 개인 프로젝트나 학습을 통해 사용해보신 적이 있나요?', 'best_answer': '네, 개인 프로젝트에서 Redux를 사용하여 상태 관리를 구현한 경험이 있습니다. Redux의 공식 문서를 참고하여 상태 관리의 흐름과 미들웨어 사용법을 학습했습니다.', 'tech_keyword': 'Redux', 'link': 'https://redux.js.org/', 'example': ["우수 : '네, 개인 프로젝트에서 Redux를 사용하여 상태 관리를 구현한 경험이 있습니다. Redux의 공식 문서를 참고하여 상태 관리의 흐름과 미들웨어 사용법을 학습했습니다.'", "보통 : 'Redux를 학습한 적은 있지만, 실제 프로젝트에 적용해본 경험은 없습니다. 공식 문서를 통해 기본 개념을 이해하고 있습니다.'", "미흡 : 'Redux에 대해 들어본 적은 있지만, 사용해본 적은 없습니다.'"]}],
            }
        ]
        for ment in fe_evaluation[count-1].keys():
            await asyncio.sleep(5)
            await add_event({"type":ment, "data":fe_evaluation[count-1][ment]})
            logger.info(f"Event added: {fe_evaluation[count-1][ment]}")
        return
    
    async def get_searched_question(self, count:int):
        if count == 1:
            await asyncio.sleep(5)
            searched_question = """
                다음질문 생성을 위한 RAG 검색

                '사이드 이펙트란 무엇인가요?', 
                '상태 관리 라이브러리 선택 시 고려해야 할 요소는 무엇인가요?', 
                'React의 상태 관리에 대해 알고 있나요? Redux를 사용해 본 경험이 있다면, 그것에 대해 설명해 주실 수 있나요?', 
                'TanStack Query를 사용하는 주된 이유는 무엇인가요?', 'TanStack Query의 주요 특징과 사용 사례는 무엇인가요?'"""
            await add_event({"type":"searched_question", "data":searched_question})

interview_service = InterviewService(config=get_settings())

def get_interview_service():
    yield interview_service